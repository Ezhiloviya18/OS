#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int front = -1, rear = -1;

void* producer(void* arg){
    int item;
    while(1){
        item = rand() % 10 + 1; // generate a random number between 1 and 10
        if((front == 0 && rear == BUFFER_SIZE-1) || (rear == (front-1) % (BUFFER_SIZE-1))){
            // buffer is full
            printf("Buffer is full. Producer waiting...\n");
            continue;
        }
        else if(front == -1 && rear == -1){
            // buffer is empty
            front = rear = 0;
            buffer[rear] = item;
            printf("Produced item: %d\n", item);
        }
        else if(rear == BUFFER_SIZE-1 && front != 0){
            rear = 0;
            buffer[rear] = item;
            printf("Produced item: %d\n", item);
        }
        else{
            rear++;
            buffer[rear] = item;
            printf("Produced item: %d\n", item);
        }
    }
}

void* consumer(void* arg){
    int item;
    while(1){
        if(front == -1 && rear == -1){
            // buffer is empty
            printf("Buffer is empty. Consumer waiting...\n");
            continue;
        }
        item = buffer[front];
        if(front == rear){
            // buffer has only one element
            front = rear = -1;
        }
        else if(front == BUFFER_SIZE-1){
            front = 0;
        }
        else{
            front++;
        }
        printf("Consumed item: %d\n", item);
    }
}

int main(){
    pthread_t producer_thread, consumer_thread;

    // create producer thread
    if(pthread_create(&producer_thread, NULL, &producer, NULL)){
        printf("Error creating producer thread.\n");
        return -1;
    }

    // create consumer thread
    if(pthread_create(&consumer_thread, NULL, &consumer, NULL)){
        printf("Error creating consumer thread.\n");
        return -1;
    }

    // join threads
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    return 0;
}
